# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    FRONT_URL: '%env(FRONT_URL)%'
    video_path: '%env(VIDEO_PATH_URL)%'
    video_path_download: '%env(VIDEO_PATH_DOWNLOAD_URL)%'
    profile_pic_path: '%env(PROFILE_PIC_PATH_URL)%'
    faceshots_path: '%env(FACESHOTS_PATH_URL)%'
    GOOGLE_APPLICATION_CREDENTIALS_PATH: '%env(GOOGLE_APPLICATION_CREDENTIALS_PATH)%'
    AWS_SECRET_KEY: '%env(AWS_SECRET_KEY)%'
    AWS_ACCESS_KEY: '%env(AWS_ACCESS_KEY)%'
    AWS_REGION: '%env(AWS_REGION)%'
    AWS_VERSION: '%env(AWS_VERSION)%'
    API_ENV_CLIENT: '%env(API_ENV_CLIENT)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    acme_api.event.authentication_success_listener:
        class: App\EventListener\AuthenticationSuccessListener
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_success, method: onAuthenticationSuccessResponse }

    acme_api.event.jwt_created_listener:
        class: App\EventListener\JWTCreatedListener
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_created, method: onJWTCreated }

    acme_api.event.authentication_failure_listener:
            class: App\EventListener\AuthenticationFailureListener
            tags:
                - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_failure, method: onAuthenticationFailureResponse }

    App\EventListener\SessionCheckListener:
        tags:
            - { name: kernel.event_listener, event: kernel.request }

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\Repository\FailedJobRepository:
        arguments: ['@messenger.transport.failed']
